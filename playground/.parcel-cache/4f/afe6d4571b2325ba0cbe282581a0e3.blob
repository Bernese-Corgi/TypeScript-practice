function add(a, b) {
  return a + b;
}
const sum = add(1, 2);
console.log(sum);
// 3
// const error: string = add(1, 2);
// console.log(error); // 코드 작성 시점에서 에러
// 타입 선언
// 불리언 Boolean : true or false
let isBoolean;
let isDone = false;
// 숫자 Number : 모든 부동 소수점 값 사용 가능.
// ES6에서 도입된 2진수 및 8진수 리터럴도 지원한다.
let num;
let integer = 6;
let float = 3.14;
let hex = 0xf00d;
// 61453
let binary = 0b1010;
// 10
let octal = 0o744;
// 484
let infinity = Infinity;
let nan = NaN;
// 문자열 String : 작은따옴표 '', 큰따옴표 "", ES6 템플릿 문자열
let str;
let red = 'Red';
let green = 'Green';
let myColor = `My color is ${red}.`;
let yourColor = 'Your color is' + green;
// 배열 Array : 순차적으로 값을 가지는 일반 배열
// 1. 문자열만 가지는 배열
let strArray1 = ['one', 'two', 'three'];
let strArray2 = ['one', 'two', 'three'];
// 2. 숫자만 가지는 배열
let numArray1 = [1, 2, 3];
let numArray2 = [1, 2, 3];
// 3. 유니언 타입 (다중 타입): 문자열과 숫자를 동시에 가지는 배열
let unionArray1 = ['one', 2, 'three', 4, 'five'];
let unionArray2 = ['one', 2, 'three', 4, 'five'];
// 4. any :  배열이 가지는 항목의 값을 단언할 수 없을 때 사용
let anyArray = ['one', 2, {}, [], true];
let userArr = [{
  name: 'Neo',
  age: 85,
  isValid: true
}, {
  name: 'Lewis',
  age: 52,
  isValid: false
}, {
  name: 'Evan',
  age: 36,
  isValid: true
}];
// 6. 특정한 값으로 타입을 대신해서 작성할 수 있다.
// 7. 읽기 전용 배열을 생성할 수 있다.
// `readonly` 키워드 혹은 `ReadonlyArray` 타입을 사용
let arrReadonlyA = [1, 2, 3, 4];
let arrReadonlyB = [0, 9, 8, 7];
// arrA[0] = 123; // Error - TS2542: Index signature in type 'readonly number[]' only permits reading.
// arrA.push(123); // Error - TS2339: Property 'push' does not exist on type 'readonly number[]'.
// arrB[0] = 123; // Error - TS2542: Index signature in type 'readonly number[]' only permits reading.
// arrB.push(123); // Error - TS2339: Property 'push' does not exist on type 'readonly number[]'.
// 튜플 Tuple : 배열과 유사. 차이는 정해진 타입의 고정된 길이 배열을 표현한다는 것.
let tuple;
tuple = ['a', 1];
// tuple = ['a', 1, 2]; // Error - ts(2322)
// tuple = [1, 'a']; // Error - ts(2322)
// 1. 데이터를 개별 변수로 지정하지 않고 단일 Tuple 타입으로 지정해 사용할 수 있다.
// 2. Tuple 타입의 배열(2차원 배열)을 사용할 수 있다.
let users;
users = [[1, 'Neo', true], [2, 'Evan', false], [3, 'Lewis', true]];
